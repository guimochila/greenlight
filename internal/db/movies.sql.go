// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/guimochila/greenlight/internal/data"
	"github.com/lib/pq"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, year, runtime, genres)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, version
`

type CreateMovieParams struct {
	Title   string       `db:"title"`
	Year    int32        `db:"year"`
	Runtime data.Runtime `db:"runtime"`
	Genres  []string     `db:"genres"`
}

type CreateMovieRow struct {
	ID        uuid.UUID `db:"id"`
	CreatedAt time.Time `db:"created_at"`
	Version   int32     `db:"version"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (CreateMovieRow, error) {
	row := q.queryRow(ctx, q.createMovieStmt, createMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		pq.Array(arg.Genres),
	)
	var i CreateMovieRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteMovieStmt, deleteMovie, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, created_at, title, year, runtime, genres, version
FROM movies
WHERE (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1) OR $1 = '')
AND (genres @> $2 OR $2 = '{}')
ORDER BY created_at
`

type GetAllParams struct {
	PlaintoTsquery string   `db:"plainto_tsquery"`
	Genres         []string `db:"genres"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]Movie, error) {
	rows, err := q.query(ctx, q.getAllStmt, getAll, arg.PlaintoTsquery, pq.Array(arg.Genres))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Year,
			&i.Runtime,
			pq.Array(&i.Genres),
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovie = `-- name: GetMovie :one
SELECT id, created_at, title, year, runtime, genres, version
FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.queryRow(ctx, q.getMovieStmt, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.Runtime,
		pq.Array(&i.Genres),
		&i.Version,
	)
	return i, err
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $1, year = $2, runtime = $3, genres = $4, version = version + 1
WHERE id = $5 AND version = $6
RETURNING id, created_at, year, runtime, genres, version
`

type UpdateMovieParams struct {
	Title   string       `db:"title"`
	Year    int32        `db:"year"`
	Runtime data.Runtime `db:"runtime"`
	Genres  []string     `db:"genres"`
	ID      uuid.UUID    `db:"id"`
	Version int32        `db:"version"`
}

type UpdateMovieRow struct {
	ID        uuid.UUID    `db:"id"`
	CreatedAt time.Time    `db:"created_at"`
	Year      int32        `db:"year"`
	Runtime   data.Runtime `db:"runtime"`
	Genres    []string     `db:"genres"`
	Version   int32        `db:"version"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (UpdateMovieRow, error) {
	row := q.queryRow(ctx, q.updateMovieStmt, updateMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		pq.Array(arg.Genres),
		arg.ID,
		arg.Version,
	)
	var i UpdateMovieRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Year,
		&i.Runtime,
		pq.Array(&i.Genres),
		&i.Version,
	)
	return i, err
}
